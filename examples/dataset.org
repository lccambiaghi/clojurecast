* Require
#+BEGIN_SRC clojure
(ns clojurecast.core.forecast
  (:require [clojure.string :as str]
            [techtest.api :as dst]
            [tech.ml.dataset.column :as col]
            [tech.v2.datatype.functional :as dfn]
            [tech.v2.datatype :as dtype]
            [tech.v2.datatype.datetime.operations :as dtype-dt-ops]
            [tech.v2.datatype.datetime :as dtype-dt]
            [tech.ml.dataset :as ds]))
#+END_SRC

#+RESULTS:

* Dataset, column, row
** Dataset
A dataset is a sequence of maps:
#+BEGIN_SRC clojure
(ds/->dataset [{:a 1 :b 2} {:a 2 :c 3}])
#+END_SRC

#+RESULTS:
: _unnamed [2 3]:
:
: | :a | :b | :c |
: |----+----+----|
: |  1 |  2 |    |
: |  2 |    |  3 |

It can also be created with a map of name to sequence of values:
#+begin_src clojure
(def data (ds/name-values-seq->dataset {:age [1 2 3 4 5]
                                        :name ["a" "b" "c" "d" "e"]}))
#+end_src

#+RESULTS:
: #'clojurecast.core.forecast/data

** Column
A column is a sequence of values of a primitive datatype:
#+begin_src clojure
(first data)
#+end_src

#+RESULTS:
: #tech.ml.dataset.column<int64>[5]
: :age
: [1, 2, 3, 4, 5, ]

#+begin_src clojure
(-> (data :name)
    (dtype/get-datatype))
#+end_src

#+RESULTS:
: :string

You can convert the column to a datatype reader:
#+begin_src clojure
(dtype/->reader (data :age))
#+end_src

#+RESULTS:
| 1 | 2 | 3 | 4 | 5 |

** Accessing rows
You can get back rows as sequence of maps:
#+begin_src clojure
(ds/mapseq-reader data)
#+end_src

#+RESULTS:
| :name | a | :age | 1 |
| :name | b | :age | 2 |
| :name | c | :age | 3 |
| :name | d | :age | 4 |
| :name | e | :age | 5 |

Or a sequence of vectors:
#+begin_src clojure
(ds/value-reader data)
#+end_src

#+RESULTS:
| 1 | a |
| 2 | b |
| 3 | c |
| 4 | d |
| 5 | e |

* Datetime
** Instant, ZonedDateTime, ms-since-epoch
#+begin_src clojure
(def inst (dtype-dt/instant))
inst
#+end_src

#+RESULTS:
| #'clojurecast.core.forecast/inst                                 |
| #object[java.time.Instant 0x39f54a27 "2020-05-16T22:44:10.960Z"] |

#+begin_src clojure
(dtype-dt/instant->zoned-date-time inst)
#+end_src

#+RESULTS:
: #object[java.time.ZonedDateTime 0x19aa1feb "2020-05-17T00:44:10.960+02:00[Europe/Copenhagen]"]

#+begin_src clojure
(-> (dtype-dt/instant->zoned-date-time inst)
          (dtype-dt/zoned-date-time->milliseconds-since-epoch))
#+end_src

#+RESULTS:
: 1589669050960

#+begin_src clojure
(dtype-dt/instant->zoned-date-time inst (dtype-dt/utc-zone-id))
#+end_src

#+RESULTS:
: #object[java.time.ZonedDateTime 0x29ee65bd "2020-05-16T22:44:10.960Z[UTC]"]

** get-dt-field
#+BEGIN_SRC clojure
(dtype-dt-ops/print-field-compatibility-matrix)
#+END_SRC

#+RESULTS:

#+begin_src clojure
(-> (dtype-dt/instant->zoned-date-time inst)
    (dtype-dt-ops/get-iso-week-of-year))
#+end_src
** Plus minus time
#+BEGIN_SRC clojure
(dtype-dt-ops/print-plus-op-compatibility-matrix)
#+END_SRC

#+RESULTS:

#+begin_src clojure
(dtype-dt-ops/plus-weeks (dtype-dt/local-date) (range 5))
#+end_src

* Data exploration
Let's load the data and reshape it in long format:
#+BEGIN_SRC clojure
(defonce m5-data-full (ds/->dataset "resources/sales.csv"))
#+END_SRC

#+RESULTS:
: #'clojurecast.core.forecast/m5-data-full

#+begin_src clojure
(dtype/shape m5-data-full)
#+end_src

#+RESULTS:
| 1919 | 30490 |

Since we deal with a fairly big dataset, let's operate on a sample:
#+begin_src clojure
(defonce m5-data-sample (let [d-cols (filter #(str/starts-with? % "d_") (ds/column-names m5-data-full))
                      old-d-cols (drop-last 52 d-cols)]
                  (->> (ds/drop-columns m5-data-full old-d-cols)
                       (ds/head 1000))))

#+end_src

#+RESULTS:
: #'clojurecast.core.forecast/m5-data-sample

#+begin_src clojure
(ds/head m5-data-sample)
#+end_src


#+begin_src clojure
(ds/brief m5-data-sample)
#+end_src

#+begin_src clojure
(dst/columns-info m5-data-sample)
#+end_src

#+RESULTS:
#+begin_example
_unnamed [58 4]:

| :categorical? |    :name | :size | :datatype |
|---------------+----------+-------+-----------|
|          true |       id |  1000 |   :string |
|          true |  item_id |  1000 |   :string |
|          true |  dept_id |  1000 |   :string |
|          true |   cat_id |  1000 |   :string |
|          true | store_id |  1000 |   :string |
|          true | state_id |  1000 |   :string |
|               |   d_1862 |  1000 |    :int16 |
|               |   d_1863 |  1000 |    :int16 |
|               |   d_1864 |  1000 |    :int16 |
|               |   d_1865 |  1000 |    :int16 |
|               |   d_1866 |  1000 |    :int16 |
|               |   d_1867 |  1000 |    :int16 |
|               |   d_1868 |  1000 |    :int16 |
|               |   d_1869 |  1000 |    :int16 |
|               |   d_1870 |  1000 |    :int16 |
|               |   d_1871 |  1000 |    :int16 |
|               |   d_1872 |  1000 |    :int16 |
|               |   d_1873 |  1000 |    :int16 |
|               |   d_1874 |  1000 |    :int16 |
|               |   d_1875 |  1000 |    :int16 |
|               |   d_1876 |  1000 |    :int16 |
|               |   d_1877 |  1000 |    :int16 |
|               |   d_1878 |  1000 |    :int16 |
|               |   d_1879 |  1000 |    :int16 |
|               |   d_1880 |  1000 |    :int16 |
#+end_example

#+begin_src clojure
(ds/column-names m5-data-sample)
#+end_src

* Filter, sort, group
We can bring the dataset in long format with:
#+BEGIN_SRC clojure
(defonce m5-data-long (dst/pivot->longer m5-data-sample #(str/starts-with? % "d_"){:target-cols       "day"
                                                                                   :value-column-name "sales"}))
(dtype/shape m5-data-long)
#+END_SRC

#+RESULTS:
| 8 | 52000 |

#+begin_src clojure
(ds/select-columns m5-data-long ["state_id"])
#+end_src

#+begin_src clojure
(ds/select m5-data-sample :all (range 100))
#+end_src

We can filter values in a dataset by applying a function to each row of the dataset, which is a map:
#+begin_src clojure
(dst/select-rows m5-data-long (fn [row] (> (get row "sales") 20)))
#+end_src

#+RESULTS:
#+begin_example
resources/sales.csv [155 8]:

|                              id |         item_id |     dept_id |    cat_id | store_id | state_id |    day | sales |
|---------------------------------+-----------------+-------------+-----------+----------+----------+--------+-------|
|   HOBBIES_1_189_CA_1_validation |   HOBBIES_1_189 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1912 |    22 |
|   HOBBIES_1_244_CA_1_validation |   HOBBIES_1_244 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1912 |    23 |
| HOUSEHOLD_1_334_CA_1_validation | HOUSEHOLD_1_334 | HOUSEHOLD_1 | HOUSEHOLD |     CA_1 |       CA | d_1898 |    35 |
| HOUSEHOLD_1_414_CA_1_validation | HOUSEHOLD_1_414 | HOUSEHOLD_1 | HOUSEHOLD |     CA_1 |       CA | d_1898 |    31 |
|   HOBBIES_1_288_CA_1_validation |   HOBBIES_1_288 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1908 |    28 |
| HOUSEHOLD_1_032_CA_1_validation | HOUSEHOLD_1_032 | HOUSEHOLD_1 | HOUSEHOLD |     CA_1 |       CA | d_1899 |    21 |
| HOUSEHOLD_1_096_CA_1_validation | HOUSEHOLD_1_096 | HOUSEHOLD_1 | HOUSEHOLD |     CA_1 |       CA | d_1899 |    21 |
| HOUSEHOLD_1_118_CA_1_validation | HOUSEHOLD_1_118 | HOUSEHOLD_1 | HOUSEHOLD |     CA_1 |       CA | d_1899 |    28 |
| HOUSEHOLD_1_191_CA_1_validation | HOUSEHOLD_1_191 | HOUSEHOLD_1 | HOUSEHOLD |     CA_1 |       CA | d_1899 |    23 |
| HOUSEHOLD_1_414_CA_1_validation | HOUSEHOLD_1_414 | HOUSEHOLD_1 | HOUSEHOLD |     CA_1 |       CA | d_1899 |    21 |
|   HOBBIES_1_008_CA_1_validation |   HOBBIES_1_008 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1896 |    26 |
|   HOBBIES_1_268_CA_1_validation |   HOBBIES_1_268 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1882 |    46 |
|   HOBBIES_1_288_CA_1_validation |   HOBBIES_1_288 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1882 |    29 |
|   HOBBIES_1_295_CA_1_validation |   HOBBIES_1_295 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1882 |    21 |
|   HOBBIES_1_169_CA_1_validation |   HOBBIES_1_169 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1869 |    37 |
|   HOBBIES_1_268_CA_1_validation |   HOBBIES_1_268 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1869 |    42 |
|   HOBBIES_1_008_CA_1_validation |   HOBBIES_1_008 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1891 |    38 |
|   HOBBIES_1_048_CA_1_validation |   HOBBIES_1_048 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1891 |    26 |
|   HOBBIES_1_348_CA_1_validation |   HOBBIES_1_348 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1891 |    21 |
| HOUSEHOLD_1_334_CA_1_validation | HOUSEHOLD_1_334 | HOUSEHOLD_1 | HOUSEHOLD |     CA_1 |       CA | d_1891 |    28 |
| HOUSEHOLD_1_418_CA_1_validation | HOUSEHOLD_1_418 | HOUSEHOLD_1 | HOUSEHOLD |     CA_1 |       CA | d_1891 |    27 |
|   HOBBIES_1_019_CA_1_validation |   HOBBIES_1_019 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1905 |    31 |
|   HOBBIES_1_090_CA_1_validation |   HOBBIES_1_090 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1905 |    26 |
|   HOBBIES_1_189_CA_1_validation |   HOBBIES_1_189 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1905 |    22 |
|   HOBBIES_1_369_CA_1_validation |   HOBBIES_1_369 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1905 |    49 |
#+end_example

#+begin_src clojure
(dst/order-by m5-data-long "sales" :desc)
#+end_src

#+RESULTS:
#+begin_example
resources/sales.csv [52000 8]:

|                              id |         item_id |     dept_id |    cat_id | store_id | state_id |    day | sales |
|---------------------------------+-----------------+-------------+-----------+----------+----------+--------+-------|
|   HOBBIES_1_254_CA_1_validation |   HOBBIES_1_254 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1870 |    70 |
|   HOBBIES_1_048_CA_1_validation |   HOBBIES_1_048 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1864 |    62 |
|   HOBBIES_1_048_CA_1_validation |   HOBBIES_1_048 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1892 |    54 |
|   HOBBIES_1_048_CA_1_validation |   HOBBIES_1_048 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1900 |    53 |
|   HOBBIES_1_261_CA_1_validation |   HOBBIES_1_261 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1900 |    50 |
|   HOBBIES_1_369_CA_1_validation |   HOBBIES_1_369 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1905 |    49 |
|   HOBBIES_1_278_CA_1_validation |   HOBBIES_1_278 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1897 |    48 |
|   HOBBIES_1_268_CA_1_validation |   HOBBIES_1_268 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1882 |    46 |
|   HOBBIES_1_369_CA_1_validation |   HOBBIES_1_369 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1870 |    46 |
|   HOBBIES_1_268_CA_1_validation |   HOBBIES_1_268 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1906 |    44 |
|   HOBBIES_1_268_CA_1_validation |   HOBBIES_1_268 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1869 |    42 |
|   HOBBIES_1_268_CA_1_validation |   HOBBIES_1_268 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1895 |    42 |
|   HOBBIES_1_398_CA_1_validation |   HOBBIES_1_398 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1884 |    40 |
|   HOBBIES_1_008_CA_1_validation |   HOBBIES_1_008 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1891 |    38 |
|   HOBBIES_1_404_CA_1_validation |   HOBBIES_1_404 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1864 |    38 |
|   HOBBIES_1_404_CA_1_validation |   HOBBIES_1_404 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1887 |    38 |
|   HOBBIES_1_008_CA_1_validation |   HOBBIES_1_008 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1907 |    37 |
|   HOBBIES_1_268_CA_1_validation |   HOBBIES_1_268 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1889 |    37 |
|   HOBBIES_1_169_CA_1_validation |   HOBBIES_1_169 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1869 |    37 |
|   HOBBIES_1_286_CA_1_validation |   HOBBIES_1_286 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1901 |    36 |
|   HOBBIES_1_288_CA_1_validation |   HOBBIES_1_288 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1900 |    36 |
|   HOBBIES_1_189_CA_1_validation |   HOBBIES_1_189 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1913 |    35 |
| HOUSEHOLD_1_334_CA_1_validation | HOUSEHOLD_1_334 | HOUSEHOLD_1 | HOUSEHOLD |     CA_1 |       CA | d_1898 |    35 |
|   HOBBIES_1_319_CA_1_validation |   HOBBIES_1_319 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1871 |    34 |
|   HOBBIES_1_371_CA_1_validation |   HOBBIES_1_371 |   HOBBIES_1 |   HOBBIES |     CA_1 |       CA | d_1892 |    33 |
#+end_example

The result of a group-by is a dataset.
#+BEGIN_SRC clojure
(-> m5-data-long
    (ds/select-columns ["day" "item_id" "sales"])
    (dst/group-by ["item_id" "day"])
    )
#+END_SRC

#+RESULTS:

It can be ungrouped into one dataset
#+begin_src clojure
(-> m5-data-long
    (ds/select-columns ["day" "item_id" "sales"])
    (dst/group-by ["item_id" "day"])
    (dst/ungroup)
    (dst/order-by ["item_id" "day"])
    )
#+end_src

#+RESULTS:
#+begin_example
_unnamed [52000 3]:

|    day |       item_id | sales |
|--------+---------------+-------|
| d_1862 | HOBBIES_1_001 |     1 |
| d_1863 | HOBBIES_1_001 |     0 |
| d_1864 | HOBBIES_1_001 |     1 |
| d_1865 | HOBBIES_1_001 |     0 |
| d_1866 | HOBBIES_1_001 |     0 |
| d_1867 | HOBBIES_1_001 |     1 |
| d_1868 | HOBBIES_1_001 |     1 |
| d_1869 | HOBBIES_1_001 |     3 |
| d_1870 | HOBBIES_1_001 |     0 |
| d_1871 | HOBBIES_1_001 |     0 |
| d_1872 | HOBBIES_1_001 |     0 |
| d_1873 | HOBBIES_1_001 |     1 |
| d_1874 | HOBBIES_1_001 |     1 |
| d_1875 | HOBBIES_1_001 |     1 |
| d_1876 | HOBBIES_1_001 |     3 |
| d_1877 | HOBBIES_1_001 |     1 |
| d_1878 | HOBBIES_1_001 |     3 |
| d_1879 | HOBBIES_1_001 |     1 |
| d_1880 | HOBBIES_1_001 |     2 |
| d_1881 | HOBBIES_1_001 |     2 |
| d_1882 | HOBBIES_1_001 |     0 |
| d_1883 | HOBBIES_1_001 |     1 |
| d_1884 | HOBBIES_1_001 |     1 |
| d_1885 | HOBBIES_1_001 |     1 |
| d_1886 | HOBBIES_1_001 |     1 |
#+end_example
